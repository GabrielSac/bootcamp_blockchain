// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lambchain/lambchain/suma.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Suma struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Op1     int32  `protobuf:"varint,2,opt,name=op1,proto3" json:"op1,omitempty"`
	Op2     int32  `protobuf:"varint,3,opt,name=op2,proto3" json:"op2,omitempty"`
	Res     int32  `protobuf:"varint,4,opt,name=res,proto3" json:"res,omitempty"`
	Creator string `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Suma) Reset()         { *m = Suma{} }
func (m *Suma) String() string { return proto.CompactTextString(m) }
func (*Suma) ProtoMessage()    {}
func (*Suma) Descriptor() ([]byte, []int) {
	return fileDescriptor_abaad3d8f73fe63e, []int{0}
}
func (m *Suma) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Suma) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Suma.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Suma) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Suma.Merge(m, src)
}
func (m *Suma) XXX_Size() int {
	return m.Size()
}
func (m *Suma) XXX_DiscardUnknown() {
	xxx_messageInfo_Suma.DiscardUnknown(m)
}

var xxx_messageInfo_Suma proto.InternalMessageInfo

func (m *Suma) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Suma) GetOp1() int32 {
	if m != nil {
		return m.Op1
	}
	return 0
}

func (m *Suma) GetOp2() int32 {
	if m != nil {
		return m.Op2
	}
	return 0
}

func (m *Suma) GetRes() int32 {
	if m != nil {
		return m.Res
	}
	return 0
}

func (m *Suma) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Suma)(nil), "lambchain.lambchain.Suma")
}

func init() { proto.RegisterFile("lambchain/lambchain/suma.proto", fileDescriptor_abaad3d8f73fe63e) }

var fileDescriptor_abaad3d8f73fe63e = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcb, 0x49, 0xcc, 0x4d,
	0x4a, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x47, 0xb0, 0x8a, 0x4b, 0x73, 0x13, 0xf5, 0x0a, 0x8a, 0xf2,
	0x4b, 0xf2, 0x85, 0x84, 0xe1, 0xa2, 0x7a, 0x70, 0x96, 0x52, 0x1a, 0x17, 0x4b, 0x70, 0x69, 0x6e,
	0xa2, 0x10, 0x1f, 0x17, 0x53, 0x66, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x4b, 0x10, 0x53, 0x66,
	0x8a, 0x90, 0x00, 0x17, 0x73, 0x7e, 0x81, 0xa1, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x88,
	0x09, 0x11, 0x31, 0x92, 0x60, 0x86, 0x89, 0x18, 0x81, 0x44, 0x8a, 0x52, 0x8b, 0x25, 0x58, 0x20,
	0x22, 0x45, 0xa9, 0xc5, 0x42, 0x12, 0x5c, 0xec, 0xc9, 0x45, 0xa9, 0x89, 0x25, 0xf9, 0x45, 0x12,
	0xac, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30, 0xae, 0x93, 0xe9, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e,
	0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37,
	0x1e, 0xcb, 0x31, 0x44, 0x49, 0x23, 0x1c, 0x5b, 0x81, 0xe4, 0xf0, 0x92, 0xca, 0x82, 0xd4, 0xe2,
	0x24, 0x36, 0xb0, 0xd3, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x74, 0xd4, 0x64, 0x27, 0xdc,
	0x00, 0x00, 0x00,
}

func (m *Suma) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Suma) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Suma) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSuma(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Res != 0 {
		i = encodeVarintSuma(dAtA, i, uint64(m.Res))
		i--
		dAtA[i] = 0x20
	}
	if m.Op2 != 0 {
		i = encodeVarintSuma(dAtA, i, uint64(m.Op2))
		i--
		dAtA[i] = 0x18
	}
	if m.Op1 != 0 {
		i = encodeVarintSuma(dAtA, i, uint64(m.Op1))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintSuma(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSuma(dAtA []byte, offset int, v uint64) int {
	offset -= sovSuma(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Suma) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSuma(uint64(m.Id))
	}
	if m.Op1 != 0 {
		n += 1 + sovSuma(uint64(m.Op1))
	}
	if m.Op2 != 0 {
		n += 1 + sovSuma(uint64(m.Op2))
	}
	if m.Res != 0 {
		n += 1 + sovSuma(uint64(m.Res))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSuma(uint64(l))
	}
	return n
}

func sovSuma(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSuma(x uint64) (n int) {
	return sovSuma(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Suma) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSuma
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Suma: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Suma: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuma
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op1", wireType)
			}
			m.Op1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuma
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op2", wireType)
			}
			m.Op2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuma
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			m.Res = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuma
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Res |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuma
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuma
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuma
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSuma(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSuma
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSuma(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSuma
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSuma
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSuma
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSuma
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSuma
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSuma
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSuma        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSuma          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSuma = fmt.Errorf("proto: unexpected end of group")
)
